import re
import json
import os
import sys
from striprtf.striprtf import rtf_to_text

def load_existing_reactions(json_file_path):
    """
    Load existing reaction data from JSON file
    """
    try:
        with open(json_file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Warning: {json_file_path} not found. Creating new structure.")
        return {}

def extract_data_from_rtf_directly(rtf_file_path):
    """
    Extract reagent/solvent names and conditions directly from RTF file
    Returns a mapping of scheme numbers to the extracted data
    """
    print(f"Reading RTF file: {rtf_file_path}")
    
    try:
        with open(rtf_file_path, 'r', encoding='utf-8') as file:
            content = file.read()
    except Exception as e:
        print(f"Error reading RTF file: {e}")
        return {}
    
    extracted_data = {}
    
    # Try multiple patterns for different RTF formats
    
    # Pattern 1: Original format (like Valine RTF)
    scheme_pattern1 = r'\\f1\\b.*?(\d+)\.\s*Scheme\s*(\d+).*?\\f0\\b0(.*?)(?=\\f1\\b.*?\d+\.\s*Scheme|\Z)'
    schemes1 = re.findall(scheme_pattern1, content, re.DOTALL)
    
    # Pattern 2: Alternative format (for files generated by different RTF libraries)
    # Look for simpler patterns
    scheme_pattern2 = r'(\d+)\.\s*Scheme\s*(\d+).*?(?=\d+\.\s*Scheme|\Z)'
    schemes2 = re.findall(scheme_pattern2, content, re.DOTALL | re.IGNORECASE)
    
    # Use the pattern that gives more results
    if len(schemes1) > 0:
        schemes = schemes1
        use_pattern = 1
        print(f"Found {len(schemes)} schemes using Pattern 1 (RTF format with font tags)")
    elif len(schemes2) > 0:
        # For pattern 2, we need to extract the content differently
        schemes = []
        matches = list(re.finditer(r'(\d+)\.\s*Scheme\s*(\d+)', content, re.DOTALL | re.IGNORECASE))
        for i, match in enumerate(matches):
            seq_num = match.group(1)
            scheme_num = match.group(2)
            start_pos = match.end()
            # Find the end position (next scheme or end of file)
            if i + 1 < len(matches):
                end_pos = matches[i + 1].start()
            else:
                end_pos = len(content)
            scheme_content = content[start_pos:end_pos]
            schemes.append((seq_num, scheme_num, scheme_content))
        use_pattern = 2
        print(f"Found {len(schemes)} schemes using Pattern 2 (simple scheme detection)")
    else:
        print("No schemes found with either pattern")
        return {}
    
    for seq_num, scheme_num, scheme_content in schemes:
        scheme_number = int(scheme_num)
        print(f"Processing Scheme {scheme_number}...")
        
        scheme_data = extract_scheme_data_from_rtf(scheme_content, scheme_number, use_pattern)
        extracted_data[scheme_number] = scheme_data
    
    return extracted_data

def extract_scheme_data_from_rtf(scheme_content, scheme_number, use_pattern):
    """
    Extract data from individual scheme RTF content
    """
    data = {
        "reagent_names": [],
        "solvent_names": [],
        "catalyst_names": [],
        "conditions": {}
    }
    
    # Clean up RTF formatting for easier parsing
    clean_content = re.sub(r'\\f\d+', '', scheme_content)
    clean_content = re.sub(r'\\b\d*', '', clean_content)
    clean_content = re.sub(r'\\[a-z]+\d*\s*', ' ', clean_content)
    clean_content = re.sub(r'\s+', ' ', clean_content).strip()
    
    if use_pattern == 1:
        # Original pattern for Valine-style RTF
        # Extract reagents
        reagent_patterns = [
            r'Reagents:\s*([^\\]+?)(?=\s*\\cell|\s*Solvents:|\s*Catalysts:|$)',
            r'\\f1\\b.*?Reagents:\s*\\f0\\b0\s*([^\\]+?)\\cell',
        ]
        
        for pattern in reagent_patterns:
            matches = re.findall(pattern, scheme_content, re.IGNORECASE)
            for match in matches:
                # Clean up the match
                reagent = re.sub(r'\\[a-z]+\d*\s*', '', match).strip()
                reagent = re.sub(r'\s+', ' ', reagent)
                if reagent and reagent != '-' and len(reagent) > 2:
                    # Split multiple reagents if separated by semicolons or commas
                    reagents = re.split(r'[;,]\s*', reagent)
                    for r in reagents:
                        r = r.strip()
                        if r and r not in data["reagent_names"]:
                            data["reagent_names"].append(r)
        
        # Extract catalysts (and conditions from catalyst descriptions)
        catalyst_patterns = [
            r'Catalysts:\s*([^\\]+?)(?=\s*\\cell|\s*Solvents:|\s*Reagents:|$)',
            r'\\f1\\b.*?Catalysts:\s*\\f0\\b0\s*([^\\]+?)\\cell',
        ]
        
        for pattern in catalyst_patterns:
            matches = re.findall(pattern, scheme_content, re.IGNORECASE)
            for match in matches:
                # Clean up the match
                catalyst_text = re.sub(r'\\[a-z]+\d*\s*', '', match).strip()
                catalyst_text = re.sub(r'\s+', ' ', catalyst_text)
                
                if catalyst_text and catalyst_text != '-' and len(catalyst_text) > 2:
                    # Check if conditions are embedded (like "catalyst; 60 s, rt; 12 h, 60°C")
                    parts = re.split(r';\s*', catalyst_text)
                    catalyst_name = parts[0].strip()
                    
                    if catalyst_name and catalyst_name not in data["catalyst_names"]:
                        data["catalyst_names"].append(catalyst_name)
                    
                    # Extract conditions from the remaining parts
                    if len(parts) > 1:
                        conditions_text = '; '.join(parts[1:])
                        extracted_conditions = extract_conditions_from_text(conditions_text)
                        for key, value in extracted_conditions.items():
                            if key in data["conditions"]:
                                data["conditions"][key].extend(value)
                            else:
                                data["conditions"][key] = value
        
        # Extract solvents
        solvent_patterns = [
            r'Solvents:\s*([^\\]+?)(?=\s*\\cell|\s*Reagents:|\s*Catalysts:|$)',
            r'\\f1\\b.*?Solvents:\s*\\f0\\b0\s*([^\\]+?)\\cell',
        ]
        
        for pattern in solvent_patterns:
            matches = re.findall(pattern, scheme_content, re.IGNORECASE)
            for match in matches:
                # Clean up the match
                solvent = re.sub(r'\\[a-z]+\d*\s*', '', match).strip()
                solvent = re.sub(r'\s+', ' ', solvent)
                if solvent and solvent != '-' and len(solvent) > 2:
                    # Split multiple solvents if separated by semicolons or commas
                    solvents = re.split(r'[;,]\s*', solvent)
                    for s in solvents:
                        s = s.strip()
                        if s and s not in data["solvent_names"]:
                            data["solvent_names"].append(s)
    
    elif use_pattern == 2:
        # Alternative pattern for different RTF formats
        # More general patterns that don't rely on specific RTF formatting
        
        # Extract reagents - look for text after "Reagents:" up to next section or RTF control
        reagent_patterns = [
            r'Reagents:\s*([^{}]+?)(?=\s*Solvents:|\s*Catalysts:|\s*\\|\s*\{|$)',
            r'\\b\d+\s+Reagents:\s*([^{}]+?)(?=\s*\\|\s*\{|$)',
        ]
        
        for pattern in reagent_patterns:
            matches = re.findall(pattern, scheme_content, re.IGNORECASE | re.DOTALL)
            for match in matches:
                # Clean up the match
                reagent = re.sub(r'\\[a-zA-Z]+\d*\s*', '', match).strip()
                reagent = re.sub(r'\{[^}]*\}', '', reagent)  # Remove RTF groups
                reagent = re.sub(r'\s+', ' ', reagent)
                reagent = reagent.replace('\\', '').strip()
                
                if reagent and reagent != '-' and len(reagent) > 2:
                    # Split multiple reagents if separated by semicolons or commas
                    reagents = re.split(r'[;,]\s*', reagent)
                    for r in reagents:
                        r = r.strip()
                        if r and r not in data["reagent_names"] and len(r) > 2:
                            data["reagent_names"].append(r)
        
        # Extract catalysts
        catalyst_patterns = [
            r'Catalysts:\s*([^{}]+?)(?=\s*Solvents:|\s*Reagents:|\s*\\|\s*\{|$)',
            r'\\b\d+\s+Catalysts:\s*([^{}]+?)(?=\s*\\|\s*\{|$)',
        ]
        
        for pattern in catalyst_patterns:
            matches = re.findall(pattern, scheme_content, re.IGNORECASE | re.DOTALL)
            for match in matches:
                # Clean up the match
                catalyst_text = re.sub(r'\\[a-zA-Z]+\d*\s*', '', match).strip()
                catalyst_text = re.sub(r'\{[^}]*\}', '', catalyst_text)  # Remove RTF groups
                catalyst_text = re.sub(r'\s+', ' ', catalyst_text)
                catalyst_text = catalyst_text.replace('\\', '').strip()
                
                if catalyst_text and catalyst_text != '-' and len(catalyst_text) > 2:
                    # Check if conditions are embedded (like "catalyst; 60 s, rt; 12 h, 60°C")
                    parts = re.split(r';\s*', catalyst_text)
                    catalyst_name = parts[0].strip()
                    
                    if catalyst_name and catalyst_name not in data["catalyst_names"] and len(catalyst_name) > 2:
                        data["catalyst_names"].append(catalyst_name)
                    
                    # Extract conditions from the remaining parts
                    if len(parts) > 1:
                        conditions_text = '; '.join(parts[1:])
                        extracted_conditions = extract_conditions_from_text(conditions_text)
                        for key, value in extracted_conditions.items():
                            if key in data["conditions"]:
                                data["conditions"][key].extend(value)
                            else:
                                data["conditions"][key] = value
        
        # Extract solvents
        solvent_patterns = [
            r'Solvents:\s*([^{}]+?)(?=\s*Reagents:|\s*Catalysts:|\s*\\|\s*\{|$)',
            r'\\b\d+\s+Solvents:\s*([^{}]+?)(?=\s*\\|\s*\{|$)',
        ]
        
        for pattern in solvent_patterns:
            matches = re.findall(pattern, scheme_content, re.IGNORECASE | re.DOTALL)
            for match in matches:
                # Clean up the match
                solvent = re.sub(r'\\[a-zA-Z]+\d*\s*', '', match).strip()
                solvent = re.sub(r'\{[^}]*\}', '', solvent)  # Remove RTF groups
                solvent = re.sub(r'\s+', ' ', solvent)
                solvent = solvent.replace('\\', '').strip()
                
                if solvent and solvent != '-' and len(solvent) > 2:
                    # Split multiple solvents if separated by semicolons or commas
                    solvents = re.split(r'[;,]\s*', solvent)
                    for s in solvents:
                        s = s.strip()
                        if s and s not in data["solvent_names"] and len(s) > 2:
                            data["solvent_names"].append(s)
    
    # Remove duplicates and clean up
    data["reagent_names"] = list(set(data["reagent_names"]))
    data["catalyst_names"] = list(set(data["catalyst_names"]))
    data["solvent_names"] = list(set(data["solvent_names"]))
    
    return data

def extract_conditions_from_text(text):
    """
    Extract reaction conditions like temperature, time, pressure from text
    """
    conditions = {}
    
    # Look for temperature patterns
    temp_patterns = [
        r'(\d+)\s*°C',
        r'(\d+)\s*degrees?',
        r'rt|room\s+temp(?:erature)?',
    ]
    
    temperatures = []
    for pattern in temp_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        if pattern == r'rt|room\s+temp(?:erature)?':
            if re.search(pattern, text, re.IGNORECASE):
                temperatures.append('room temperature')
        else:
            for match in matches:
                temperatures.append(f"{match}°C")
    
    if temperatures:
        conditions['temperature'] = temperatures
    
    # Look for time patterns
    time_patterns = [
        r'(\d+)\s*h(?:ours?)?',
        r'(\d+)\s*min(?:utes?)?',
        r'(\d+)\s*s(?:ec(?:onds?)?)?',
    ]
    
    times = []
    for pattern in time_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        for match in matches:
            if 'h' in pattern:
                times.append(f"{match} hours")
            elif 'min' in pattern:
                times.append(f"{match} minutes")
            elif 's' in pattern:
                times.append(f"{match} seconds")
    
    if times:
        conditions['time'] = times
    
    # Look for pressure patterns
    pressure_patterns = [
        r'(\d+)\s*psi',
        r'(\d+)\s*bar',
        r'(\d+)\s*atm',
    ]
    
    pressures = []
    for pattern in pressure_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        for match in matches:
            if 'psi' in pattern:
                pressures.append(f"{match} psi")
            elif 'bar' in pattern:
                pressures.append(f"{match} bar")
            elif 'atm' in pattern:
                pressures.append(f"{match} atm")
    
    if pressures:
        conditions['pressure'] = pressures
    
    return conditions

def merge_reaction_data(existing_reactions, extracted_data):
    """
    Merge extracted data into existing reaction structure
    """
    print("Merging extracted data with existing reaction data...")
    
    # Update each reaction
    for reaction_key in existing_reactions:
        # Extract reaction number from the key (reaction1 -> 1, reaction2 -> 2, etc.)
        reaction_num = int(reaction_key.replace('reaction', ''))
        
        if reaction_num in extracted_data:
            rtf_info = extracted_data[reaction_num]
            reaction = existing_reactions[reaction_key]
            
            # Add names to reagents
            if 'reagents' in reaction and rtf_info['reagent_names']:
                for i, reagent in enumerate(reaction['reagents']):
                    if i < len(rtf_info['reagent_names']):
                        reagent['name'] = rtf_info['reagent_names'][i]
            
            # Add names to solvents
            if 'solvents' in reaction and rtf_info['solvent_names']:
                for i, solvent in enumerate(reaction['solvents']):
                    if i < len(rtf_info['solvent_names']):
                        solvent['name'] = rtf_info['solvent_names'][i]
            
            # Add names to catalysts
            if 'catalysts' in reaction and rtf_info['catalyst_names']:
                for i, catalyst in enumerate(reaction['catalysts']):
                    if i < len(rtf_info['catalyst_names']):
                        catalyst['name'] = rtf_info['catalyst_names'][i]
            
            # Add conditions if they exist
            if rtf_info['conditions']:
                reaction['conditions'] = rtf_info['conditions']
    
    return existing_reactions

def save_to_json(reactions, output_file):
    """
    Save reactions data to JSON file
    """
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(reactions, f, indent=2, ensure_ascii=False)

# Main execution
if __name__ == "__main__":
    # Handle command line arguments
    if len(sys.argv) == 4:
        existing_json = sys.argv[1]
        rtf_file = sys.argv[2]
        output_file = sys.argv[3]
    else:
        print("Usage: python extract_reactions.py <existing_json> <rtf_file> <output_file>")
        print("Using default files:")
        existing_json = "Threonine/threonine_reactions.json"
        rtf_file = "Threonine/threonine rich text 1-500.rtf"
        output_file = "Threonine/threonine_reactions_updated.json"
        print(f"  Existing JSON: {existing_json}")
        print(f"  RTF file: {rtf_file}")
        print(f"  Output file: {output_file}")
    
    print("Loading existing reaction data...")
    existing_reactions = load_existing_reactions(existing_json)
    
    print("Extracting data from RTF file...")
    extracted_data = extract_data_from_rtf_directly(rtf_file)
    
    if not extracted_data:
        print("No data could be extracted from the RTF file.")
        sys.exit(1)
    
    print("Merging data...")
    updated_reactions = merge_reaction_data(existing_reactions, extracted_data)
    
    # Save updated JSON
    save_to_json(updated_reactions, output_file)
    
    print(f"Updated data saved to {output_file}")
    
    # Print summary of what was added
    print("\nSummary of added information:")
    for reaction_key in updated_reactions:
        reaction = updated_reactions[reaction_key]
        reaction_num = reaction_key.replace('reaction', '')
        
        print(f"\nReaction {reaction_num}:")
        
        # Check reagents with names
        if 'reagents' in reaction:
            reagents_with_names = [r for r in reaction['reagents'] if 'name' in r]
            if reagents_with_names:
                print(f"  Reagents with names: {len(reagents_with_names)}")
                for reagent in reagents_with_names:
                    print(f"    - {reagent.get('name', 'N/A')}")
        
        # Check solvents with names
        if 'solvents' in reaction:
            solvents_with_names = [s for s in reaction['solvents'] if 'name' in s]
            if solvents_with_names:
                print(f"  Solvents with names: {len(solvents_with_names)}")
                for solvent in solvents_with_names:
                    print(f"    - {solvent.get('name', 'N/A')}")
        
        # Check catalysts with names
        if 'catalysts' in reaction:
            catalysts_with_names = [c for c in reaction['catalysts'] if 'name' in c]
            if catalysts_with_names:
                print(f"  Catalysts with names: {len(catalysts_with_names)}")
                for catalyst in catalysts_with_names:
                    print(f"    - {catalyst.get('name', 'N/A')}")
        
        # Check conditions
        if 'conditions' in reaction and reaction['conditions']:
            print(f"  Conditions: {reaction['conditions']}")
        else:
            print(f"  Conditions: None") 